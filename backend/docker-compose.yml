services:
  db:
    image: postgis/postgis:17-3.4
    container_name: ${POSTGRES_CONTAINER_NAME:-kaleidoscope-postgres}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-rajay04}/kaleidoscope:backend-${APP_VERSION:-latest}
    container_name: ${APP_CONTAINER_NAME:-kaleidoscope-app}
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    env_file:
      - .env
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - app-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kaleidoscope-elasticsearch
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
    networks:
      - app-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kaleidoscope-kibana
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch
    restart: always

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge